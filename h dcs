[1mdiff --git a/car_reference.module b/car_reference.module[m
[1mindex 1113df5..63815ad 100644[m
[1m--- a/car_reference.module[m
[1m+++ b/car_reference.module[m
[36m@@ -90,14 +90,6 @@[m [mfunction car_reference_field_settings_form($field, $instance, $has_data) {[m
   foreach ($vocabularies as $vocabulary) {[m
     $options[$vocabulary->machine_name] = $vocabulary->name;[m
   }[m
[31m-  $form['allowed_values'] = array([m
[31m-    '#tree' => TRUE,[m
[31m-    '#attached' => array([m
[31m-      'js' => array([m
[31m-        'car_reference-field-visibility' => drupal_get_path('module', 'car_reference') . '/car_reference.admin.js',[m
[31m-      ),[m
[31m-    ),[m
[31m-  );[m
 [m
   // Get all the vocabularies fields for initial push,[m
   // as they need to be here for validation purpose.[m
[36m@@ -105,13 +97,13 @@[m [mfunction car_reference_field_settings_form($field, $instance, $has_data) {[m
   $taxonomy_fields_options = array();[m
   foreach ($vocabulary_fields as $t_field) {[m
     if (!empty($t_field)) {[m
[31m-      $taxonomy_fields_options = array_merge([m
[31m-        $taxonomy_fields_options, array_combine([m
[31m-          array_keys($t_field), array_keys($t_field)[m
[31m-      ));[m
[32m+[m[32m      $taxonomy_fields_options = array_merge($taxonomy_fields_options, array_combine(array_keys($t_field), array_keys($t_field)));[m
     }[m
   }[m
 [m
[32m+[m[32m  $form['allowed_values']['#tree'] = TRUE;[m
[32m+[m
[32m+[m[32m  $no_way_to_edit = array();[m
   foreach ($field['settings']['allowed_values'] as $delta => $tree) {[m
     $delta_split = explode('_', $delta);[m
     $vocab_type = ucfirst($delta_split[0]);[m
[36m@@ -157,8 +149,28 @@[m [mfunction car_reference_field_settings_form($field, $instance, $has_data) {[m
       '#prefix' => '<div class="ajax-vocabulary-conf-ref-field-name">',[m
       '#suffix' => '</div>',[m
     );[m
[32m+[m
[32m+[m[32m    // Detect the cases when data will can't be set/changed from UI because of[m
[32m+[m[32m    // the data pushed into field table.[m
[32m+[m[32m    if ($has_data && (empty($tree['ref_field_name']) || empty($tree['vocabulary']))) {[m
[32m+[m[32m      $no_way_to_edit[] = $delta;[m
[32m+[m[32m    }[m
   }[m
 [m
[32m+[m[32m  // Send the needed variables into JS.[m
[32m+[m[32m  $form['allowed_values']['#attached']['js'] = array([m
[32m+[m[32m    array([m
[32m+[m[32m      'data' => array([m
[32m+[m[32m        'car_reference' => array([m
[32m+[m[32m          'hasData' => $has_data,[m
[32m+[m[32m          'noWayToEdit' => $no_way_to_edit,[m
[32m+[m[32m        ),[m
[32m+[m[32m      ),[m
[32m+[m[32m      'type' => 'setting',[m
[32m+[m[32m    ),[m
[32m+[m[32m    'car_reference-field-visibility' => drupal_get_path('module', 'car_reference') . '/car_reference.admin.js',[m
[32m+[m[32m  );[m
[32m+[m
   return $form;[m
 }[m
 [m
[36m@@ -288,8 +300,8 @@[m [mfunction car_reference_field_formatter_settings_summary($field, $instance, $view[m
         '#type' => 'item',[m
         '#title' => t('Settings'),[m
         '#markup' => t('View mode: %mode Vocabulary: %vocab', array([m
[31m-          '%mode' => $settings['view_mode'],[m
[31m-          '%vocab' => $settings['vocabulary'],[m
[32m+[m[32m            '%mode' => $settings['view_mode'],[m
[32m+[m[32m            '%vocab' => $settings['vocabulary'],[m
           )[m
         ),[m
       );[m
[36m@@ -466,30 +478,30 @@[m [mfunction car_reference_field_widget_form(&$form, &$form_state, $field, $instance[m
     case 'car_reference_tids':[m
 [m
       $element['make_tid'] = array([m
[31m-        '#type' => 'textfield',[m
[31m-        '#title' => t('Make'),[m
[31m-        '#default_value' => isset($items[$delta]['make_tid']) ? $items[$delta]['make_tid'] : NULL,[m
[31m-        '#size' => $instance['widget']['settings']['size'],[m
[31m-        '#maxlength' => $field['settings']['max_length'],[m
[31m-        '#attributes' => array('class' => array('text-full')),[m
[32m+[m[32m          '#type' => 'textfield',[m
[32m+[m[32m          '#title' => t('Make'),[m
[32m+[m[32m          '#default_value' => isset($items[$delta]['make_tid']) ? $items[$delta]['make_tid'] : NULL,[m
[32m+[m[32m          '#size' => $instance['widget']['settings']['size'],[m
[32m+[m[32m          '#maxlength' => $field['settings']['max_length'],[m
[32m+[m[32m          '#attributes' => array('class' => array('text-full')),[m
         ) + $base;[m
 [m
       $element['model_tid'] = array([m
[31m-        '#type' => 'textfield',[m
[31m-        '#title' => t('Model'),[m
[31m-        '#default_value' => isset($items[$delta]['model_tid']) ? $items[$delta]['model_tid'] : NULL,[m
[31m-        '#size' => $instance['widget']['settings']['size'],[m
[31m-        '#maxlength' => $field['settings']['max_length'],[m
[31m-        '#attributes' => array('class' => array('text-full')),[m
[32m+[m[32m          '#type' => 'textfield',[m
[32m+[m[32m          '#title' => t('Model'),[m
[32m+[m[32m          '#default_value' => isset($items[$delta]['model_tid']) ? $items[$delta]['model_tid'] : NULL,[m
[32m+[m[32m          '#size' => $instance['widget']['settings']['size'],[m
[32m+[m[32m          '#maxlength' => $field['settings']['max_length'],[m
[32m+[m[32m          '#attributes' => array('class' => array('text-full')),[m
         ) + $base;[m
 [m
       $element['edition_tid'] = array([m
[31m-        '#type' => 'textfield',[m
[31m-        '#title' => t('Edition'),[m
[31m-        '#default_value' => isset($items[$delta]['edition_tid']) ? $items[$delta]['edition_tid'] : NULL,[m
[31m-        '#size' => $instance['widget']['settings']['size'],[m
[31m-        '#maxlength' => $field['settings']['max_length'],[m
[31m-        '#attributes' => array('class' => array('text-full')),[m
[32m+[m[32m          '#type' => 'textfield',[m
[32m+[m[32m          '#title' => t('Edition'),[m
[32m+[m[32m          '#default_value' => isset($items[$delta]['edition_tid']) ? $items[$delta]['edition_tid'] : NULL,[m
[32m+[m[32m          '#size' => $instance['widget']['settings']['size'],[m
[32m+[m[32m          '#maxlength' => $field['settings']['max_length'],[m
[32m+[m[32m          '#attributes' => array('class' => array('text-full')),[m
         ) + $base;[m
 [m
       break;[m
[36m@@ -508,12 +520,12 @@[m [mfunction car_reference_field_widget_form(&$form, &$form_state, $field, $instance[m
 [m
       // Use a fake element to store the term name value.[m
       $element['taxonomy_term'] = array([m
[31m-        '#type' => 'textfield',[m
[31m-        '#default_value' => (isset($term->name)) ? $term->name : '',[m
[31m-        '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $instance['entity_type'] . '/' . $instance['bundle'] . '/' . $field['field_name'],[m
[31m-        '#size' => $instance['widget']['settings']['size'],[m
[31m-        '#maxlength' => 1024,[m
[31m-        '#element_validate' => array('car_reference_autocomplete_validate'),[m
[32m+[m[32m          '#type' => 'textfield',[m
[32m+[m[32m          '#default_value' => (isset($term->name)) ? $term->name : '',[m
[32m+[m[32m          '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $instance['entity_type'] . '/' . $instance['bundle'] . '/' . $field['field_name'],[m
[32m+[m[32m          '#size' => $instance['widget']['settings']['size'],[m
[32m+[m[32m          '#maxlength' => 1024,[m
[32m+[m[32m          '#element_validate' => array('car_reference_autocomplete_validate'),[m
         ) + $base;[m
       break;[m
   }[m
